}
country <- 'DE'
Ex3_cont_obj <- get_content(country, 0)
resp_obj_test <- GET(url = "https://app.ticketmaster.com/discovery/v2/venues?apikey=7elxdku9GGG5k8j0Xm8KWdANDgecHMV0&locale=*&page=0&countryCode=DE")
cont_obj_test <- resp_obj_test %>% content()
View(Ex3_cont_obj)
View(cont_obj_test)
get_content <- function(country, page) {
resp_obj <- GET(url = paste0(my_url, "&local=*&page=", page, "&countryCode=", country))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
paste0(my_url, "&local=*&page=", page, "&countryCode=", country)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues?apikey=", key)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues?apikey=", key)
get_content <- function(country, page) {
resp_obj <- GET(url = paste0(my_url, "&local=*&page=", page, "&countryCode=", country))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
country <- 'DE'
Ex3_cont_obj <- get_content(country, 0)
View(Ex3_cont_obj)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues?apikey=", key)
get_content <- function(country, page) {
resp_obj <- GET(url = paste0(my_url, "&locale=*&page=", page, "&countryCode=", country))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
country <- 'DE'
Ex3_cont_obj <- get_content(country, 0)
View(Ex3_cont_obj)
n = 20
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),
latitude = character(n))
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
View(df_Ex3)
df_Ex3$longitude <- parse_number(df_Ex3$longitude)
df_Ex3$latitude <- parse_number(df_Ex3$latitude)
m = as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = character(m),
latitude = character(m))
dummy_df <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),
latitude = character(n))
remove(page)
all_info_one_country <- function(df, dummy_df, country, pages) {
# Note: erste Seite nicht vergesssen (page = 0)
for (j in 1:pages) {
cont_obj <- get_content(country, j)
df[(20*j - 19):(20*j), ] <- fill_dataframe(cont_obj = cont_obj, df = dummy_df)
Sys.sleep(time = 60/5)
}
return(df)
}
df_test <- all_info_one_country(df_test, dummy_df, country, 2)
df_test <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = character(m),
latitude = character(m))
df_test <- all_info_one_country(df_test, dummy_df, country, 2)
View(df_test)
# df_test <- all_info_one_country(df_test, dummy_df, country, 2)
## TEST
cont_obj_2 <- get_content(country, 2)
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
View(cont_obj_2)
cont_obj_2 <- get_content(country, 2)
View(cont_obj_2)
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
View(dummy_df)
View(cont_obj_2)
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
# df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])  # adapted
# Special case adress: not always mentioned
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]]) == FALSE) {
df[i, 4] <- NA
} else {
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]])
}
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
cont_obj_2 <- get_content(country, 2)
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
View(df_2)
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
# df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])  # adapted
# Special case adress: not always mentioned
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]]) == FALSE) {
df[i, 4] <- NA
} else {
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]])
}
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
cont_obj_2 <- get_content(country, 2)
remove(df_2)
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
View(df_2)
View(cont_obj_2)
cont_obj_2[["_embedded"]][["venues"]][[14]][["address"]]
is.character(cont_obj_2[["_embedded"]][["venues"]][[14]][["address"]])
is.character(cont_obj_2[["_embedded"]][["venues"]][[14]][["address"]][[1]])
remove(fill_dataframe())
View(all_info_one_country)
# Clear workspace
rm(list = ls())
# Source private key - insert yout indicidual path to the key
source("C:/Users/Francesca/Desktop/MA_WiSe 202021/Data Science Project Management/Assignments/key_ticketmaster.R")
# Load packages
library(jsonlite)
library(httr)
library(rlist)
library(tidyverse)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues?apikey=", key)
# Function GET CONTENT
get_content <- function(country, page) {
resp_obj <- GET(url = paste0(my_url, "&locale=*&page=", page, "&countryCode=", country))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
# Function FILLING DATAFRAME
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
# df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])  # adapted
# Special case adress: not always mentioned
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]]) == FALSE) {
df[i, 4] <- NA
} else {
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]])
}
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
country <- 'DE'
Ex3_cont_obj <- get_content(country, 0)
n = 20
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),
latitude = character(n))
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
df_Ex3$longitude <- parse_number(df_Ex3$longitude)
df_Ex3$latitude <- parse_number(df_Ex3$latitude)
cont_obj_2 <- get_content(country, 2)
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
dummy_df <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),
latitude = character(n))
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
View(df_2)
is.character(cont_obj[["_embedded"]][["venues"]][[14]][["adress"]][[1]])
is.character(cont_obj_2[["_embedded"]][["venues"]][[i]][["adress"]][[1]])
is.character(cont_obj_2[["_embedded"]][["venues"]][[14]][["adress"]][[1]])
class(cont_obj_2[["_embedded"]][["venues"]][[14]][["adress"]][[1]])
is.null(cont_obj_2[["_embedded"]][["venues"]][[14]][["adress"]][[1]])
is.null(cont_obj_2[["_embedded"]][["venues"]][[15]][["adress"]][[1]])
is.character(cont_obj_2[["_embedded"]][["venues"]][[14]][["address"]])
is.null(cont_obj_2[["_embedded"]][["venues"]][[14]][["address"]])
is.null(cont_obj_2[["_embedded"]][["venues"]][[15]][["address"]])
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
# df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])  # adapted
# Special case adress: not always mentioned
if (is.null(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]]) == TRUE) {
df[i, 4] <- NA
} else {
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]])
}
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
cont_obj_2 <- get_content(country, 2)
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
View(df_2)
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
# df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])  # adapted
# Special case adress: not always mentioned
if (is.null(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]]) == TRUE) {
df[i, 4] <- NA
} else {
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]])
}
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
remove(df_2)
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
View(df_2)
is.null(cont_obj_2[["_embedded"]][["venues"]][[14]][["address"]])
is.null(cont_obj_2[["_embedded"]][["venues"]][[15]][["address"]])
is.null(cont_obj_2[["_embedded"]][["venues"]][[1]][["address"]])
# Function FILLING DATAFRAME
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
# df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])  # adapted
# Special case adress: not always mentioned
# if (is.null(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]]) == TRUE) {
#   df[i, 4] <- NA
#   } else {
#     df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]])
#   }
if (is.null(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]]) == FALSE) {
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]])
} else {
df[i, 4] <- NULL
}
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
# df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])  # adapted
# Special case adress: not always mentioned
# if (is.null(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]]) == TRUE) {
#   df[i, 4] <- NA
#   } else {
#     df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]])
#   }
if (is.null(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]]) == FALSE) {
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["adress"]][[1]])
} else {
df[i, 4] <- NA
}
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
View(df_2)
is.null(cont_obj_2[["_embedded"]][["venues"]][[14]][["adress"]][[1]])
if (is.null(cont_obj_2[["_embedded"]][["venues"]][[14]][["adress"]]) == TRUE) {
print("NULL")
} else {
print("there is an adress")
}
is.null(cont_obj_2[["_embedded"]][["venues"]][[14]][["adress"]])
is.null(cont_obj_2[["_embedded"]][["venues"]][[14]][["address"]])
# Function FILLING DATAFRAME
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
# df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])  # adapted
# Special case adress: not always mentioned
if (is.null(cont_obj[["_embedded"]][["venues"]][[i]][["address"]]) == TRUE) {
df[i, 4] <- NA
} else {
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])
}
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
cont_obj_2 <- get_content(country, 2)
df_2 <- fill_dataframe(cont_obj_2, dummy_df)
View(df_2)
---
title: "Assignment V: GitHub and the ticketmaster.com API"
subtitle: "Data Science Project Management | Winter Term 2020/21"
author: "Submitted by Franziska Müller (Student ID: 5401673)"
date: "February, 16, 2021"
output:
html_document:
toc: true
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r preparation, message = FALSE, warning = FALSE}
# Clear workspace
rm(list = ls())
# Source private key - insert yout indicidual path to the key
source("C:/Users/Francesca/Desktop/MA_WiSe 202021/Data Science Project Management/Assignments/key_ticketmaster.R")
```
```{r packages, message = FALSE, warning = FALSE}
# Load packages
library(jsonlite)
library(httr)
library(rlist)
library(tidyverse)
```
```{r Functions}
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues?apikey=", key)
# Function GET CONTENT
get_content <- function(country, page) {
resp_obj <- GET(url = paste0(my_url, "&locale=*&page=", page, "&countryCode=", country))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
# Function FILLING DATAFRAME
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
# df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])  # adapted
# Special case adress: not always mentioned
if (is.null(cont_obj[["_embedded"]][["venues"]][[i]][["address"]]) == TRUE) {
df[i, 4] <- NA
} else {
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][[1]])
}
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
```
## Exercise 3: Interacting with the API - the basics
```{r Extracting_specific_elements}
# Exercise 3
country <- 'DE'
Ex3_cont_obj <- get_content(country, 0)
# Use page = 0 in order to get the first 20 results
n = 20
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
address = character(n),
url = character(n),
longitude = character(n),
latitude = character(n))
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
df_Ex3$longitude <- parse_number(df_Ex3$longitude)
df_Ex3$latitude <- parse_number(df_Ex3$latitude)
# glimpse(df_Ex3)
```
## Exercise 4: Interacting with the API - advanced
```{r Ex_4}
m = as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])
df_test <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
address = character(m),
url = character(m),
longitude = character(m),
latitude = character(m))
dummy_df <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
address = character(n),
url = character(n),
longitude = character(n),
latitude = character(n))
all_info_one_country <- function(df, dummy_df, country, pages) {
# Note: erste Seite nicht vergesssen (page = 0)
for (j in 1:pages) {
cont_obj <- get_content(country, j)
df[(20*j - 19):(20*j), ] <- fill_dataframe(cont_obj = cont_obj, df = dummy_df)
Sys.sleep(time = 60/5)
}
# Note: Last page
return(df)
}
```
