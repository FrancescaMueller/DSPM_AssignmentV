df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = numeric(n),  # is.double anpassen
latitude = character(n))
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
n = 20
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),  # is.double anpassen
latitude = character(n))
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])  # ith row, first col
df[i, 2] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
df[i, 4] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][["line1"]])
df[i, 5] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
# Latitude
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
df_Ex3 <- df_Ex3 %>% mutate(longitude = as.numeric(longitude), latitude = as.numeric(latitude))
df_Ex3[1,6]
n = 20
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),  # is.double anpassen
latitude = character(n))
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
df_Ex3$longitude <- as.numeric(df_Ex3$longitude)
df_Ex3[1,6]
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
n = 20
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),  # is.double anpassen
latitude = character(n))
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
df_Ex3$longitude <- round(as.numeric(df_Ex3$longitude), digits = 10)
df_Ex3[1,6]
n = 20
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),  # is.double anpassen
latitude = character(n))
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])  # ith row, first col
df[i, 2] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
df[i, 4] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][["line1"]])
df[i, 5] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
# Latitude
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
test <- df_Ex3[, 6:7]
test$longitude <- parse_number(test$longitude)
test$latitude
df_Ex3$longitude <- parse_number(df_Ex3$longitude)
df_Ex3$longitude
df_Ex3$latitude <- parse_number(df_Ex3$latitude)
df_Ex3$latitude
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
# Maybe note regarding individual working directory
# Source private key - insert yout indicidual path to the key
source("C:/Users/Francesca/Desktop/MA_WiSe 202021/Data Science Project Management/Assignments/key_ticketmaster.R")
# Check if packages have been installed before; if not, install them
if (!require("jsonlite")) install.packages("jsonlite")
if (!require("httr")) install.packages("httr")
if (!require("rlist")) install.packages("rlist")
if (!require("tidyverse")) install.packages("tidyverse")
# if (!require("naniar")) install.packages("naniar")
# Load packages
library(jsonlite)
library(httr)
library(rlist)
library(tidyverse)
# library(naniar)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues.json?apikey=", key)
# Create a function for better reusability
get_content <- function(country) {
resp_obj <- GET(url = my_url,
query = list(countryCode = country))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
Ex3_cont_obj <- get_content('DE')
n = 20
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),  # is.double anpassen
latitude = character(n))
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])  # ith row, first col
df[i, 2] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
df[i, 4] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][["line1"]])
df[i, 5] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
# Latitude
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as.tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),  # is.double anpassen
latitude = character(n))
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])  # ith row, first col
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][["line1"]])
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
# Latitude
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
df_Ex3$longitude <- parse_number(df_Ex3$longitude)
df_Ex3$latitude <- parse_number(df_Ex3$latitude)
df_Ex3$latitude
glimpse(df_Ex3)
View(Ex3_cont_obj)
Ex3_cont_obj[["page"]][["totalPages"]]
Ex3_cont_obj[["page"]][["totalElements"]]
4743/238
m = Ex3_cont_obj[["page"]][["totalElements"]]
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = character(m),  # is.double anpassen
latitude = character(m))
View(df_Ex4)
# Loop
pages <- Ex3_cont_obj[["page"]][["totalPages"]]
# Loop
pages <- as.numeric(Ex3_cont_obj[["page"]][["totalPages"]])
m = as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = character(m),
latitude = character(m))
pages <- as.numeric(Ex3_cont_obj[["page"]][["totalPages"]])
get_content <- function(country, page) {
resp_obj <- GET(url = my_url,
query = list(countryCode = country,
page = page))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
Ex3_cont_obj <- get_content('DE', 1)
View(Ex3_cont_obj)
Ex3_cont_obj <- get_content('DE', 0)
get_content <- function(country) {
resp_obj <- GET(url = my_url,
query = list(countryCode = country))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
Ex3_cont_obj <- get_content('DE')
get_content <- function(country) {
resp_obj <- GET(url = my_url,
query = list(countryCode = country,
page = 0))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
Ex3_cont_obj <- get_content('DE')
View(Ex3_cont_obj)
get_content <- function(country, page) {
resp_obj <- GET(url = my_url,
query = list(countryCode = country,
page = page))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
Ex3_cont_obj <- get_content('DE', 0)
m = as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = character(m),
latitude = character(m))
pages <- 2
country <- 'DE'
Ex3_cont_obj <- get_content(country, 0)
for (i in 0:pages) {
cont_obj <- get_content(contry, i)
df_Ex4[(20*i - 19):(20*i), ] <- fill_dataframe(cont_obj = cont_obj, df = df_Ex4)
}
for (i in 0:pages) {
cont_obj <- get_content(country, i)
df_Ex4[(20*i - 19):(20*i), ] <- fill_dataframe(cont_obj = cont_obj, df = df_Ex4)
}
rlang::last_error()
floor(m/n)
as.numeric(Ex3_cont_obj[["page"]][["totalPages"]])
for (i in 1:pages) {
cont_obj <- get_content(country, i)
df_Ex4[(20*i - 19):(20*i), ] <- fill_dataframe(cont_obj = cont_obj, df = df_Ex4)
}
for (i in 1:pages) {
cont_obj <- get_content(country, i)
new_info <- fill_dataframe(cont_obj = cont_obj, df = df_Ex4)
df_Ex4[(20*i - 19):(20*i), ] <- new_info
}
source("C:/Users/Francesca/Desktop/MA_WiSe 202021/Data Science Project Management/Assignments/key_ticketmaster.R")
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues.json?apikey=", key)
# Create a function for better reusability
get_content <- function(country, page) {
resp_obj <- GET(url = my_url,
query = list(countryCode = country,
page = page))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
country <- 'DE'
Ex3_cont_obj <- get_content(country, 0)
knitr::opts_chunk$set(echo = TRUE)
# Clear workspace
rm(list = ls())
# Maybe note regarding individual working directory
# Source private key - insert yout indicidual path to the key
source("C:/Users/Francesca/Desktop/MA_WiSe 202021/Data Science Project Management/Assignments/key_ticketmaster.R")
# Load packages
library(jsonlite)
# Check if packages have been installed before; if not, install them
if (!require("jsonlite")) install.packages("jsonlite")
if (!require("httr")) install.packages("httr")
if (!require("rlist")) install.packages("rlist")
if (!require("tidyverse")) install.packages("tidyverse")
# if (!require("naniar")) install.packages("naniar")
# Load packages
library(jsonlite)
library(httr)
library(rlist)
library(tidyverse)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues.json?apikey=", key)
# Create a function for better reusability
get_content <- function(country, page) {
resp_obj <- GET(url = my_url,
query = list(countryCode = country,
page = page))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
country <- 'DE'
Ex3_cont_obj <- get_content(country, 0)
# Use page = 0 in order to get the first 20 results
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])  # ith row, first col
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][["line1"]])
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
# Latitude
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
n = 20
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),
latitude = character(n))
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
# Adapt to numerical type
# Note: double and numeric are "identical": Double describes the type, numeric the mode (implicit the class)
df_Ex3$longitude <- parse_number(df_Ex3$longitude)
df_Ex3$latitude <- parse_number(df_Ex3$latitude)
glimpse(df_Ex3)
m = as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = character(m),
latitude = character(m))
pages <- 2
for (i in 1:pages) {
cont_obj <- get_content(country, i)
df_Ex4[(20*i - 19):(20*i), ] <- fill_dataframe(cont_obj = cont_obj, df = df_Ex4)
}
View(df_Ex4)
rlang::last_error()
cont_test <- get_content(country, 0)
knitr::opts_chunk$set(echo = TRUE)
# Clear workspace
rm(list = ls())
# Maybe note regarding individual working directory
# Source private key - insert yout indicidual path to the key
source("C:/Users/Francesca/Desktop/MA_WiSe 202021/Data Science Project Management/Assignments/key_ticketmaster.R")
# Check if packages have been installed before; if not, install them
if (!require("jsonlite")) install.packages("jsonlite")
if (!require("httr")) install.packages("httr")
if (!require("rlist")) install.packages("rlist")
if (!require("tidyverse")) install.packages("tidyverse")
# if (!require("naniar")) install.packages("naniar")
# Load packages
library(jsonlite)
library(httr)
library(rlist)
library(tidyverse)
# library(naniar)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues.json?apikey=", key)
# Create a function for better reusability
get_content <- function(country, page) {
resp_obj <- GET(url = my_url,
query = list(countryCode = country,
page = page))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
country <- 'DE'
Ex3_cont_obj <- get_content(country, 0)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues.json?apikey=", key)
# Create a function for better reusability
get_content <- function(country, page) {
resp_obj <- GET(url = my_url,
query = list(countryCode = country,
page = page))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
country <- 'DE'
Ex3_cont_obj <- get_content(country, 0)
# Use page = 0 in order to get the first 20 results
# Create an empty data frame with number of rows = 20
n = 20
df_Ex3 <- tibble(name = character(n),
city = character(n),
postalCode = character(n),
adress = character(n),
url = character(n),
longitude = character(n),
latitude = character(n))
fill_dataframe <- function(cont_obj, df) {
for (i in 1:n) {
df[i, 1] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["name"]])  # ith row, first col
df[i, 2] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["city"]][["name"]])
df[i, 3] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["postalCode"]])
df[i, 4] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["address"]][["line1"]])
df[i, 5] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["url"]])
# Location variable (long/lat)
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]]) == FALSE) {
df[i, 6] <- NA
} else {
df[i, 6] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["longitude"]])
}
# Latitude
if (is.character(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]]) == FALSE) {
df[i, 7] <- NA
} else {
df[i, 7] <- as_tibble(cont_obj[["_embedded"]][["venues"]][[i]][["location"]][["latitude"]])
}
}
return(df)
}
df_Ex3 <- fill_dataframe(Ex3_cont_obj, df_Ex3)
# Adapt to numerical type
# Note: double and numeric are "identical": Double describes the type, numeric the mode (implicit the class)
df_Ex3$longitude <- parse_number(df_Ex3$longitude)
df_Ex3$latitude <- parse_number(df_Ex3$latitude)
glimpse(df_Ex3)
# Converting the type to double  ----
# Note: as.double is a generic function, it`s identical to as.numeric
#test <- df_Ex3[, 6:7]
#test$longitude <- parse_number(test$longitude)
#options(digits = 10)  # these options just refer to printing - not to the object itself in the environment
#test$longitude <- as.numeric(test$longitude)
# test[ , 1] <- as.numeric(unlist(test[ , 1]))  # Problem: "Rounding"
#df_Ex3 <- df_Ex3 %>% mutate(longitude = as.numeric(longitude), latitude = as.numeric(latitude))
m = as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = character(m),
latitude = character(m))
# Loop
pages <- 2  # dummy variable for faster testing
all_info_one_conutry <- function(df, contry, pages) {
for (i in 1:pages) {
# Problem: erste Seite nicht vergesssen (page = 0)
cont_obj <- get_content(country, i)
df[(20*i - 19):(20*i), ] <- fill_dataframe(cont_obj = cont_obj, df = df)
return(df)
}
}
all_info_one_conutry <- function(df, country, pages) {
for (i in 1:pages) {
# Problem: erste Seite nicht vergesssen (page = 0)
cont_obj <- get_content(country, i)
df[(20*i - 19):(20*i), ] <- fill_dataframe(cont_obj = cont_obj, df = df)
return(df)
}
}
df_Ex4 <- all_info_one_conutry(df = df_Ex4,
country = country,
pages = 2)
View(df_Ex4)
test_cont <-get_content(country, 0)
test_df <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = character(m),
latitude = character(m))
test_cont_1 <- get_content(country, 0)
test_cont_2 <- get_content(country, 1)
test_df[0:20, ] <- fill_dataframe(test_cont_1, test_df)
test_df[(0:20), ] <- fill_dataframe(test_cont_1, test_df)
test_df[(:20), ] <- fill_dataframe(test_cont_1, test_df)
test_df[1:21, ] <- fill_dataframe(test_cont_1, test_df)
test_info <- fill_dataframe(test_cont_1, test_df)
View(test_info)
