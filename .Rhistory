fill = "grey90",
color = "black"
) +
theme_void() + coord_quickmap() +
labs(title = "Event locations across Germany", caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
getwd()
setwd("C:/Users/Francesca/Documents/GitHub/DSPM_AssignmentV")
getwd()
plot_DE
plot_DE <- ggplot() +
geom_polygon(
aes(x = long, y = lat, group = group),
data = map_data("world", region = "Germany"),
fill = "grey90",
color = "black"
) +
geom_point(mapping = aes(x = longitude,
y = latitude),
data = Ex4_plot,
color = "purple") +  # ggf alpha
theme_void() + coord_quickmap() +
labs(title = "Event locations across Germany", caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
plot_DE
Ex4 <- Ex4_all %>% mutate(longitude = replace(
x = longitude,
list = longitude < 5.86694,
values = NA
))
Ex4 <- Ex4 %>% mutate(longitude = replace(
x = longitude,
list = longitude > 15.043611,
values = NA
))
Ex4 <- Ex4 %>% mutate(latitude = replace(
x = latitude,
list = latitude < 47.271679,
values = NA
))
Ex4 <- Ex4 %>% mutate(latitude = replace(
x = latitude,
list = latitude > 55.0846,
values = NA
))
# Remove unneded rows for the plot
Ex4_plot <- Ex4[complete.cases(Ex4[ , 6:7]), ]
plot_DE <- ggplot() +
geom_polygon(
aes(x = long, y = lat, group = group),
data = map_data("world", region = "Germany"),
fill = "grey90",
color = "black"
) +
geom_point(mapping = aes(x = longitude,
y = latitude),
data = Ex4_plot,
color = "purple") +  # ggf alpha
theme_void() + coord_quickmap() +
labs(title = "Event locations across Germany", caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
plot_DE
max(Ex4_plot$longitude)
max(Ex4_plot$latitude)
min(Ex4_plot$longitude)
min(Ex4_plot$latitude)
max(Ex4_plot$longitude) <= 100
max(Ex4_plot$longitude) <= 15.043611
min(Ex4_plot$longitude) >= 5.86694
min(Ex4_plot$latitude) >= 47.271679
# Plot
plot_DE <- ggplot() +
geom_polygon(
aes(x = long, y = lat, group = group),
data = map_data("world", region = "Germany"),
fill = "grey90",
color = "black"
) +
geom_point(mapping = aes(x = longitude,
y = latitude),
data = Ex4_plot,
color = "purple",
alpha = 0.3) +
theme_void() + coord_quickmap() +
labs(title = "Event locations across Germany", caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
plot_DE
getwd()
1
Ex5_first_glimpse <- first_glimpse("MC", 0)
view(Ex5_first_glimpse)
Ex3_first_glimpse <- first_glimpse(country, 0)
view(Ex3_first_glimpse)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues?apikey=", key)
first_glimpse <- function(country, page) {
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
Ex3_first_glimpse <- first_glimpse(country, 0)
View(Ex3_first_glimpse)
View(Ex3_first_glimpse)
view(Ex5_first_glimpse)
remove(Ex3_first_glimpse)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues?apikey=", key)
first_glimpse <- function(country, page) {
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
country <- 'DE'
Ex3_first_glimpse <- first_glimpse(country, 0)
# Use page = 0 in order to get the first 20 results
View(Ex3_first_glimpse)
remove(Ex5_first_glimpse)
Ex5_first_glimpse <- first_glimpse(country = "MC", page = 0)
View(Ex5_first_glimpse)
View(Ex3_first_glimpse)
Ex5_first_glimpse[["page"]][["totalPages"]]
Ex5_first_glimpse[["page"]][["totalElements"]]
pages_mc
# Choosing a small country with fewer observations -> Monaco
Ex5_first_glimpse <- first_glimpse("MC", 0)  # small data set
pages_mc <- Ex5_first_glimpse[["page"]][["totalPages"]]
elements_mc <- Ex5_first_glimpse[["page"]][["totalElements"]]
pages_mc
pages_mc <- as.numeric(Ex5_first_glimpse[["page"]][["totalPages"]])
elements_mc <- as.numeric(Ex5_first_glimpse[["page"]][["totalElements"]])
df_Ex6 <- tibble(name = character(elements_mc),
city = character(elements_mc),
postalCode = character(elements_mc),
adress = character(elements_mc),
url = character(elements_mc),
longitude = double(elements_mc),
latitude = double(elements_mc))
map('usa')
map("world", region = "Germany")
map_data("world", region = "Germany")
map_data("world", region = "Monaco")
df_Ex6 <- tibble(name = character(elements_mc),
city = character(elements_mc),
postalCode = character(elements_mc),
adress = character(elements_mc),
url = character(elements_mc),
longitude = double(elements_mc),
latitude = double(elements_mc))
Ex5 <- all_pages(country = "MC",
number_pages = pages_mc,
df_all_pages = df_Ex6)
View(Ex5)
Ex5_cont <- get_content("MC", 0)
View(Ex5_cont)
View(Ex5_cont)
View(Ex5_first_glimpse)
Ex5_first_glimpse <- first_glimpse("BE", 0)
View(Ex5_first_glimpse)
pages_mc <- as.numeric(Ex5_first_glimpse[["page"]][["totalPages"]])
elements_mc <- as.numeric(Ex5_first_glimpse[["page"]][["totalElements"]])
pages_be <- as.numeric(Ex5_first_glimpse[["page"]][["totalPages"]])
elements_be <- as.numeric(Ex5_first_glimpse[["page"]][["totalElements"]])
df_Ex6 <- tibble(name = character(elements_be),
city = character(elements_be),
postalCode = character(elements_be),
adress = character(elements_be),
url = character(elements_be),
longitude = double(elements_be),
latitude = double(elements_be))
Ex5 <- all_pages(country = "BE",
number_pages = elements_be,
df_all_pages = df_Ex6)
View(Ex5)
map_data("world", region = "Belgium")
Ex5_all <- Ex5
Ex5_plot <- Ex5_all[complete.cases(Ex5_all[ , 6:7]), ]
plot_BE <- ggplot() +
geom_polygon(
aes(x = long, y = lat, group = group),
data = map_data("world", region = "Belgium"),
fill = "grey90",
color = "black"
) +
geom_point(mapping = aes(x = longitude,
y = latitude),
data = Ex5_plot,
color = "purple",
alpha = 0.3) +
theme_void() + coord_quickmap() +
labs(title = "Event locations across Belgium", caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
plot_BE
Ex5 <- Ex5_all %>% mutate(longitude = replace(
x = longitude,
list = longitude < 2.590563,  # BE
values = NA
))
Ex5 <- Ex5_all %>% mutate(longitude = replace(
x = longitude,
list = longitude > 6.382170,  # BE
values = NA
))
Ex5 <- Ex5_all %>% mutate(latitude = replace(
x = latitude,
list = latitude < 49.508076,  # BE
values = NA
))
Ex5 <- Ex5_all %>% mutate(latitude = replace(
x = latitude,
list = latitude > 51.496877,  # BE
values = NA
))
View(Ex5)
Ex5 <- Ex5_all %>% mutate(longitude = replace(
x = longitude,
list = longitude < 2.590563,  # BE
values = NA
))
Ex5 <- Ex5_all %>% mutate(longitude = replace(
x = longitude,
list = longitude > 6.382170,  # BE
values = NA
))
Ex5 <- Ex5_all %>% mutate(latitude = replace(
x = latitude,
list = latitude < 49.508076,  # BE
values = NA
))
Ex5 <- Ex5_all %>% mutate(latitude = replace(
x = latitude,
list = latitude > 51.496877,  # BE
values = NA
))
Ex5_plot <- Ex5[complete.cases(Ex5[ , 6:7]), ]
plot_BE <- ggplot() +
geom_polygon(
aes(x = long, y = lat, group = group),
data = map_data("world", region = "Belgium"),
fill = "grey90",
color = "black"
) +
geom_point(mapping = aes(x = longitude,
y = latitude),
data = Ex5_plot,
color = "purple",
alpha = 0.3) +
theme_void() + coord_quickmap() +
labs(title = "Event locations across Belgium", caption = "Source: ticketmaster.com") +
theme(title = element_text(size = 8, face = 'bold'),
plot.caption = element_text(face = "italic"))
plot_BE
Ex5 <- Ex5_all %>% mutate(longitude = replace(
x = longitude,
list = longitude < 2.590563,  # BE
values = NA
min(Ex5$longitude)
View(Ex5)
min(as.numeric/Ex5$longitude)
min(as.numeric(Ex5$longitude))
max(Ex5$longitude)
min(Ex4_plot$latitude)
Ex5_plot <- Ex5[complete.cases(Ex5[ , 6:7]), ]
max(Ex5_plot$longitude)
View(Ex4_plot)
View(Ex5_plot)
Ex5 <- Ex5_all %>% mutate(longitude = replace(
x = longitude,
list = longitude < 2.590563,  # BE
values = NA
))
Ex5 <- Ex5_all %>% mutate(longitude = replace(
x = longitude,
list = longitude > 6.382170,  # BE
values = NA
))
Ex5 <- Ex5_all %>% mutate(latitude = replace(
x = latitude,
list = latitude < 49.508076,  # BE
values = NA
))
Ex5 <- Ex5_all %>% mutate(latitude = replace(
x = latitude,
list = latitude > 51.496877,  # BE
values = NA
))
Ex5_plot <- Ex5[complete.cases(Ex5[ , 6:7]), ]
View(Ex5_plot)
Ex5_first_glimpse <- first_glimpse("BE", 0)
View(Ex3_first_glimpse)
Ex3_first_glimpse[["_embedded"]][["venues"]]
Ex3_first_glimpse[["page"]][["totalElements"]]
Ex3_first_glimpse[["page"]][["totalPages"]]
View(Ex5_first_glimpse)
Ex5_first_glimpse[["page"]][["size"]]
Ex3_BE <- get_content('BE', 0)
head(Ex3_BE)
pages_be <- as.numeric(Ex5_first_glimpse[["page"]][["totalPages"]])
elements_be <- as.numeric(Ex5_first_glimpse[["page"]][["totalElements"]])
pages_BE <- as.numeric(Ex5_first_glimpse[["page"]][["totalPages"]])
# Clear workspace
rm(list = ls())
# Source private key - insert yout indicidual path to the key
source("C:/Users/Francesca/Desktop/MA_WiSe 202021/Data Science Project Management/Assignments/key_ticketmaster.R")
# Check if packages have been installed before; if not, install them
if (!require("jsonlite")) install.packages("jsonlite")
if (!require("httr")) install.packages("httr")
if (!require("rlist")) install.packages("rlist")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("tidyr")) install.packages("tidyr")
if (!require("dplyr")) install.packages("dplyr")
# Load packages
library(jsonlite)
library(dplyr)
library(httr)
library(rlist)
library(tidyverse)
library(tidyr)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues?apikey=", key)
first_glimpse <- function(country, page) {
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
country <- 'DE'
Ex3_first_glimpse <- first_glimpse(country, 0)
# Use page = 0 in order to get the first 20 results
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues?apikey=", key)
country <- "DE"
# Function GET CONTENT
get_content <- function(country, page) {
# Note_ n encoding supplied: defaulting to UTF8
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- fromJSON(content(x = resp_obj,
as = 'text'))
# Keep just relevant information about venues in general
placeholder <- as.data.frame(cont_obj$`_embedded`$venues)  # HERE -> some observations have no locations - BUT error if a whole page does not have variable location!
# Just keep relevant information asked by the assignment
df <- data.frame(placeholder$name, placeholder$city[1],
placeholder$postalCode, placeholder$address, placeholder$url
# placeholder$location[1], placeholder$location[2]
)
# Adjust for location
if (is.null(placeholder$location) == TRUE) {
df['longitude'] <- NA
df['latitude'] <- NA
} else{
df <- df %>% cbind(placeholder$location[1], placeholder$location[2])
}
# Rename columns
names(df) <- c("name", "city", "postalCode", "address", "url", "longitude", "latitude")
# Change longitude and latitude to type double
df$longitude <- df$longitude %>% as.double()
df$latitude <- df$latitude %>% as.double()
return(df)
}
Ex3 <- get_content(country, 0)
m <- as.numeric(Ex3_first_glimpse[["page"]][["totalElements"]])  # Number of total elements
pages <- as.numeric(Ex3_first_glimpse[["page"]][["totalPages"]])  # Number of total pages
# n <- as.numeric(nrow(Ex3))  # Number of elements per page
# Create empty data frame
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
all_pages <- function(country, number_pages, df_all_pages) {
for (j in 0:number_pages) {
tryCatch({
# added since very error prone
cont_obj <- get_content(country, j)
df_all_pages[(20 + 20 * j - 19):(20 + 20 * j),] <- cont_obj
Sys.sleep(time = 0.3)  # 5 requests per second, but adjusted
},
error = function(e){})
}
return(df_all_pages)
}
system.time(
Ex4_all <- all_pages(country, pages, df_Ex4)
) #
View(Ex4_all)
test_last_page <- get_content('DE', 612)
test_611 <- get_content('DE', 611)
View(test_611)
View(df_Ex4)
View(Ex4_all)
pages <- as.numeric(Ex3_first_glimpse[["page"]][["totalPages"]]) - 1
611*20
n <- as.numeric(nrow(Ex3))
m <- pages*n
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
all_pages <- function(country, number_pages, df_all_pages) {
for (j in 0:number_pages) {
tryCatch({
# added since very error prone
cont_obj <- get_content(country, j)
df_all_pages[(20 + 20 * j - 19):(20 + 20 * j),] <- cont_obj
Sys.sleep(time = 0.3)  # 5 requests per second, but adjusted
},
error = function(e){})
}
return(df_all_pages)
}
system.time(
Ex4_all <- all_pages(country, pages, df_Ex4)
) #
View(Ex4_all)
View(test_611)
test_610 <- get_content('DE', 610)
View(test_610)
View(test_611)
pages <- as.numeric(Ex3_first_glimpse[["page"]][["totalPages"]])  # Number of total pages
n <- as.numeric(nrow(Ex3))
m <- pages*n  # Maybe last page is not filled total with 20 elements, will account for that in a later step
# Create empty data frame
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
# Loop
View(Ex3_first_glimpse)
m <- Ex3_first_glimpse[["page"]][["totalElements"]]
m <- as.numeric(Ex3_first_glimpse[["page"]][["totalElements"]])
test_612 <- get_content('DE', 612)
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
all_pages <- function(country, number_pages, df_all_pages) {
for (j in 0:number_pages) {
tryCatch({
# added since very error prone
cont_obj <- get_content(country, j)
df_all_pages[(20 + 20 * j - 19):(20 + 20 * j),] <- cont_obj
Sys.sleep(time = 0.3)  # 5 requests per second allowed, but adjusted since error prone
},
error = function(e){})
}
return(df_all_pages)
}
# Get info all pages
system.time(
Ex4_all <- all_pages(country, pages, df_Ex4)
) # 256.16 sec
611*20
View(Ex4_all)
n <- as.numeric(nrow(Ex3))  # Number of elements per page
m <- as.numeric(Ex3_first_glimpse[["page"]][["totalElements"]])
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
all_pages <- function(country, number_pages, df_all_pages) {
for (j in 0:number_pages) {
tryCatch({
# added since very error prone
cont_obj <- get_content(country, j)
df_all_pages[(20 + 20 * j - 19):(20 + 20 * j),] <- cont_obj
Sys.sleep(time = 0.3)  # 5 requests per second allowed, but adjusted since error prone
},
error = function(e){})
}
return(df_all_pages)
}
# Get info all pages
system.time(
Ex4_all <- all_pages(country, pages, df_Ex4)
) # 256.16 sec
saveRDS(Ex4_all, file = "./data_DE.rds")
View(Ex4_all)
test_6 <- get_content('DE', 6)
View(test_6)
test_7 <- get_content('DE', 7)
View(test_7)
test_6 <- get_content('DE', 6)
View(test_6)
