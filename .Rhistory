return(df_all_pages)
}
Ex4_100 <- all_pages(country, 100, df_Ex4)
rlang::last_error()
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
Ex4_100 <- all_pages(country, 100, df_Ex4)
Ex4_5 <- all_pages(country, 5, df_Ex4)
View(Ex4_5)
Ex4_15 <- all_pages(country, 15, df_Ex4)
Ex4_10 <- all_pages(country, 10, df_Ex4)
Ex4_8 <- all_pages(country, 8, df_Ex4)
Ex4_9 <- all_pages(country, 9, df_Ex4)
test_page9 <- first_glimpse(country, 9)
View(test_page9)
test_page84 <- first_glimpse(country, 84)
View(test_page84)
cont_obj_page84 <- get_content(country, 84)
View(cont_obj_page84)
View(Ex3)
View(Ex3_cont_obj)
View(cont_obj_page84)
View(df_Ex4)
test_123 <- df_Ex4
test_123[1:20, ] <- cont_obj_page84
View(test_123)
Ex4_8 <- all_pages(country, 8, df_Ex4)
getwd()
setwd("C:/Users/Francesca/Documents/GitHub/DSPM_AssignmentV")
getwd()
Ex4_8 <- all_pages(country, 8, df_Ex4)
View(Ex4_8)
Ex4_9 <- all_pages(country, 9, df_Ex4)
remove(Ex4_9)
Ex4_9 <- all_pages(country, 9, df_Ex4)
remove(Ex4_15)
# location does not exist
Ex4_15 <- all_pages(country, 15, df_Ex4)
rlang::last_error()
Ex4_10 <- all_pages(country, 10, df_Ex4)
1
Ex4_10 <- all_pages(country, 10, df_Ex4)
all_pages <- function(country, number_pages, df_all_pages) {
for (j in 0:number_pages) {
cont_obj <- get_content(country, j)
df_all_pages[(20 + 20*j - 19):(20 + 20*j), ] <- cont_obj
Sys.sleep(time = 1)  # 5 requests per second
}
return(df_all_pages)
}
Ex4_10 <- all_pages(country, 10, df_Ex4)
test_page10 <- get_content(country, 10)
test_page10_glimpse <- first_glimpse(country, 10)
View(test_page10_glimpse)
View(test_page84)
test_page84_glimpse <- first_glimpse(country, 84)
test_page84 <- get_content(country, 84)
View(test_page84)
Ex4_10 <- all_pages(country, 10, df_Ex4)
View(test_page10_glimpse)
# Troubleshooting - single page in detail
test_page10_glimpse <- first_glimpse(country, 10)
test_page10 <- get_content(country, 10)
# Comparison known NA field (page 84)
test_page84_glimpse <- first_glimpse(country, 84)
test_page84 <- get_content(country 84)
test_page84 <- get_content(country, 84)
View(test_page84)
View(test_page84)
View(test_page10_glimpse)
View(test_page84_glimpse)
getwd()
test_page10 <- get_content(country, 10)
Ex4_9 <- all_pages(country, 9, df_Ex4)
Ex4_8 <- all_pages(country, 8, df_Ex4)
all_pages <- function(country, number_pages, df_all_pages) {
for (j in 0:number_pages) {
tryCatch({
cont_obj <- get_content(country, j)
df_all_pages[(20 + 20 * j - 19):(20 + 20 * j),] <- cont_obj
Sys.sleep(time = 1)  # 5 requests per second
},
error = function(e){})
}
return(df_all_pages)
}
remove(Ex4_9)
Ex4_9 <- all_pages(country, 9, df_Ex4)
Ex4_10 <- all_pages(country, 10, df_Ex4)
Ex4_15 <- all_pages(country, 15, df_Ex4)
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
all_pages <- function(country, number_pages, df_all_pages) {
for (j in 0:number_pages) {
tryCatch({
cont_obj <- get_content(country, j)
df_all_pages[(20 + 20 * j - 19):(20 + 20 * j),] <- cont_obj
Sys.sleep(time = 0.5)  # 5 requests per second, but adjusted
},
error = function(e){})
}
return(df_all_pages)
}
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
system.time(sleep(1))
system.time(sys.sleep(1))
system.time(Sys.sleep(1))
system.time(
Ex4_200 <- all_pages(country, 200, df_Ex4)
)
get_content <- function(country, page) {
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- fromJSON(content(x = resp_obj,
as = 'text'))
# Keep just relevant information about venues in general
cont_obj <- cont_obj$`_embedded`$venues
# Just keep relevant information asked by the assignment
# cont_obj <- cont_obj %>% select(name, city, postalCode, address, url, location)
# Alternative (since this throws to many warnings and is such a workaround)
df <- data.frame(cont_obj$name, cont_obj$city.name, # or city[1]
cont_obj$postalCode, cont_obj$address, cont_obj$url,
cont_obj$location.longitude, cont_obj$location.latitude
)
# Nested structure for "location"
# df <- cont_obj
# df[, 6] <- cont_obj[, 6]$longitude
# df <- df %>% rename("longitude" = "location")
# df <- df %>% cbind(latitude = cont_obj[, 6]$latitude)
#
# # Regarding nested structure
# df[2] <-
#   df[2] %>% unnest(city)  # Note: throwing warning, but works - keep it
# df[4] <- df[4] %>% unnest(address)
#
# # Change longitude and latitude to type double
# df$longitude <- df$longitude %>% as.double()
# df$latitude <- df$latitude %>% as.double()
#
df <- as.data.frame(df)  # Workaround getting names
return(df)
}
test_page0 <- get_content(country, 0)
get_content <- function(country, page) {
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- fromJSON(content(x = resp_obj,
as = 'text'))
# Keep just relevant information about venues in general
cont_obj <- cont_obj$`_embedded`$venues
# Just keep relevant information asked by the assignment
# cont_obj <- cont_obj %>% select(name, city, postalCode, address, url, location)
# Alternative (since this throws to many warnings and is such a workaround)
df <- data.frame(cont_obj$name, cont_obj$city[1], # or city[1]
cont_obj$postalCode, cont_obj$address, cont_obj$url,
cont_obj$location[1], cont_obj$location[2]
)
# Nested structure for "location"
# df <- cont_obj
# df[, 6] <- cont_obj[, 6]$longitude
# df <- df %>% rename("longitude" = "location")
# df <- df %>% cbind(latitude = cont_obj[, 6]$latitude)
#
# # Regarding nested structure
# df[2] <-
#   df[2] %>% unnest(city)  # Note: throwing warning, but works - keep it
# df[4] <- df[4] %>% unnest(address)
#
# # Change longitude and latitude to type double
# df$longitude <- df$longitude %>% as.double()
# df$latitude <- df$latitude %>% as.double()
#
df <- as.data.frame(df)  # Workaround getting names
return(df)
}
test_page0 <- get_content(country, 0)
View(test_page0)
get_content <- function(country, page) {
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- fromJSON(content(x = resp_obj,
as = 'text'))
# Keep just relevant information about venues in general
cont_obj <- cont_obj$`_embedded`$venues
# Just keep relevant information asked by the assignment
# cont_obj <- cont_obj %>% select(name, city, postalCode, address, url, location)
# Alternative (since this throws to many warnings and is such a workaround)
df <- data.frame(cont_obj$name, cont_obj$city[1], # or city[1]
cont_obj$postalCode, cont_obj$address, cont_obj$url,
cont_obj$location[1], cont_obj$location[2]
)
# Nested structure for "location"
# df <- cont_obj
# df[, 6] <- cont_obj[, 6]$longitude
# df <- df %>% rename("longitude" = "location")
# df <- df %>% cbind(latitude = cont_obj[, 6]$latitude)
#
# # Regarding nested structure
# df[2] <-
#   df[2] %>% unnest(city)  # Note: throwing warning, but works - keep it
# df[4] <- df[4] %>% unnest(address)
#
# # Change longitude and latitude to type double
# df$longitude <- df$longitude %>% as.double()
# df$latitude <- df$latitude %>% as.double()
#
#df <- as.data.frame(df)  # Workaround getting names
return(df)
}
test_page0 <- get_content(country, 0)
View(test_page0)
test_page0 <- test_page0 %>% rename("name", "city", "postalCode", "address", "url", "longitude", "latitude")
names(test_page0) <- c("name", "city", "postalCode", "address", "url", "longitude", "latitude")
get_content <- function(country, page) {
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- fromJSON(content(x = resp_obj,
as = 'text'))
# Keep just relevant information about venues in general
cont_obj <- cont_obj$`_embedded`$venues
# Just keep relevant information asked by the assignment
df <- data.frame(cont_obj$name, cont_obj$city[1], # or city[1]
cont_obj$postalCode, cont_obj$address, cont_obj$url,
cont_obj$location[1], cont_obj$location[2]
)
# Rename columns
name(df) <- c("name", "city", "postalCode", "address", "url", "longitude", "latitude")
return(df)
}
Ex3 <- get_content(country, 0)
get_content <- function(country, page) {
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- fromJSON(content(x = resp_obj,
as = 'text'))
# Keep just relevant information about venues in general
cont_obj <- cont_obj$`_embedded`$venues
# Just keep relevant information asked by the assignment
df <- data.frame(cont_obj$name, cont_obj$city[1], # or city[1]
cont_obj$postalCode, cont_obj$address, cont_obj$url,
cont_obj$location[1], cont_obj$location[2]
)
# Rename columns
names(df) <- c("name", "city", "postalCode", "address", "url", "longitude", "latitude")
return(df)
}
Ex3 <- get_content(country, 0)
View(Ex3)
remove(Ex4_200)
system.time(
Ex4_200 <- all_pages(country, 200, df_Ex4)
)  # 118.20 sec
View(Ex4_200)
View(Ex4_200)
remove(Ex4_200)
system.time(
Ex4_200 <- all_pages(country, 200, df_Ex4)
)
system.time(
Ex4_200 <- all_pages(country, 200, df_Ex4)
)  # 118.20 sec
Ex4_8 <- all_pages(country, 8, df_Ex4)
# Woeks sometimes
Ex4_10 <- all_pages(country, 10, df_Ex4)
1
system.time(
Ex4_50 <- all_pages(country, 50, df_Ex4)
)
system.time(
Ex4_50 <- all_pages(country, 50, df_Ex4)
)
View(Ex4_50)
Ex4_8 <- all_pages(country, 8, df_Ex4)
View(Ex4_8)
test_page0 <- get_content(country, 0)
view(test_page0)
test_page5 <- get_content(country, 5)
view(test_page5)
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
test <- all_pages(country, 5, df_Ex4)
View(test)
df_Ex4[1:20, ] <- test_page0
get_content <- function(country, page) {
# Note_ n encoding supplied: defaulting to UTF8
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- fromJSON(content(x = resp_obj,
as = 'text'))
# Keep just relevant information about venues in general
cont_obj <- cont_obj$`_embedded`$venues
# Just keep relevant information asked by the assignment
df <- data.frame(cont_obj$name, cont_obj$city[1], # or city[1]
cont_obj$postalCode, cont_obj$address, cont_obj$url,
cont_obj$location[1], cont_obj$location[2]
)
# Rename columns
names(df) <- c("name", "city", "postalCode", "address", "url", "longitude", "latitude")
# Change longitude and latitude to type double
df$longitude <- df$longitude %>% as.double()
df$latitude <- df$latitude %>% as.double()
return(df)
}
test <- all_pages(country, 3, df_Ex4)
View(test)
Ex3 <- get_content(country, 0)
View(Ex3)
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
# Get info 50
system.time(
Ex4_50 <- all_pages(country, 50, df_Ex4)
)
View(Ex4_50)
m/n
Ex3_cont_obj[["page"]][["totalPages"]]
m = as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])  # Number total elements (238 13/02/2021)
m = Ex3_cont_obj[["page"]][["totalPages"]]
m = as.numeric(Ex3_cont_obj[["page"]][["totalPages"]])
m = as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])  # Number of total elements
m <- as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])  # Number of total elements
pages <- as.numeric(Ex3_cont_obj[["page"]][["totalPages"]])  # Number of total pages
n <- as.numeric(count(Ex3))  # Number of elements per page
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
system.time(
Ex4_all <- all_pages(country, pages = pages, df_Ex4)
)
system.time(
Ex4_all <- all_pages(country, pages, df_Ex4)
)
View(Ex4_all)
remove(Ex4_all)
# Clear workspace
rm(list = ls())
# Source private key - insert yout indicidual path to the key
source("C:/Users/Francesca/Desktop/MA_WiSe 202021/Data Science Project Management/Assignments/key_ticketmaster.R")
# Check if packages have been installed before; if not, install them
if (!require("jsonlite")) install.packages("jsonlite")
if (!require("httr")) install.packages("httr")
if (!require("rlist")) install.packages("rlist")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("tidyr")) install.packages("tidyr")
if (!require("dplyr")) install.packages("dplyr")
# Load packages
library(jsonlite)
library(dplyr)
library(httr)
library(rlist)
library(tidyverse)
library(tidyr)
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues.json?apikey=", key)
first_glimpse <- function(country, page) {
resp_obj <- GET(url = my_url,
query = list(countryCode = country,
page = page))
cont_obj <- resp_obj %>% content()
return(cont_obj)
}
country <- 'DE'
Ex3_first_glimpse <- first_glimpse(country, 0)
# Use page = 0 in order to get the first 20 results
my_url <- paste0("https://app.ticketmaster.com/discovery/v2/venues?apikey=", key)
country <- "DE"
# Function GET CONTENT
get_content <- function(country, page) {
# Note_ n encoding supplied: defaulting to UTF8
resp_obj <- GET(url = paste0(my_url,
"&locale=*&page=",
page,
"&countryCode=",
country))
cont_obj <- fromJSON(content(x = resp_obj,
as = 'text'))
# Keep just relevant information about venues in general
cont_obj <- cont_obj$`_embedded`$venues
# Just keep relevant information asked by the assignment
df <- data.frame(cont_obj$name, cont_obj$city[1], # or city[1]
cont_obj$postalCode, cont_obj$address, cont_obj$url,
cont_obj$location[1], cont_obj$location[2]
)
# Rename columns
names(df) <- c("name", "city", "postalCode", "address", "url", "longitude", "latitude")
# Change longitude and latitude to type double
df$longitude <- df$longitude %>% as.double()
df$latitude <- df$latitude %>% as.double()
return(df)
}
Ex3 <- get_content(country, 0)
m <- as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])  # Number of total elements
m <- as.numeric(Ex3_cont_obj[["page"]][["totalElements"]])  # Number of total elements
m <- as.numeric(Ex3[["page"]][["totalElements"]])
# Number of total elements
pages <- as.numeric(Ex3[["page"]][["totalPages"]])
n <- as.numeric(count(Ex3))  # Number of elements per page
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
m <- as.numeric(Ex3_first_glimpse[["page"]][["totalElements"]])  # Number of total elements
pages <- as.numeric(Ex3_first_glimpse[["page"]][["totalPages"]])  # Number of total pages
n <- as.numeric(count(Ex3_first_glimpse))  # Number of elements per page
n <- as.numeric(length(Ex3_first_glimpse))  # Number of elements per page
n <- as.numeric(length(Ex3))
n <- nrow(Ex3)  # Number of elements per page
n <- as.numeric(nrow(Ex3))  # Number of elements per page
df_Ex4 <- tibble(name = character(m),
city = character(m),
postalCode = character(m),
adress = character(m),
url = character(m),
longitude = double(m),
latitude = double(m))
all_pages <- function(country, number_pages, df_all_pages) {
for (j in 0:number_pages) {
tryCatch({
# added since very error prone
cont_obj <- get_content(country, j)
df_all_pages[(20 + 20 * j - 19):(20 + 20 * j),] <- cont_obj
Sys.sleep(time = 0.3)  # 5 requests per second, but adjusted
},
error = function(e){})
}
return(df_all_pages)
}
Ex4_5 <- all_pages(country, 5, df_Ex4)
View(Ex4_5)
remove(Ex4_5)
system.time(
Ex4_all <- all_pages(country, pages, df_Ex4)
)  # 130.25, leider nur bis entry 200
View(Ex4_all)
remove(n)
remove(Ex4_all)
system.time(
Ex4_all <- all_pages(country, pages, df_Ex4)
)  # 130.25, leider nur bis entry 200 -> 10*20
View(Ex4_all)
View(df_Ex4)
Ex4_10 <- all_pages(country, 10, df_Ex4)
View(Ex4_10)
Ex4_11 <- all_pages(country, 11, df_Ex4)
View(Ex4_11)
# Troubleshooting - single page in detail
test_page11_glimpse <- first_glimpse(country, 11)  # works
View(test_page11_glimpse)
test_page11 <- get_content(country, 11)  # location does not exist -> Error
test_page84_glimpse <- first_glimpse(country, 84)  # works
test_page84 <- get_content(country, 84)  # works although so many NA in "location"
View(test_page84_glimpse)
View(test_page84)
View(Ex4_11)
test_page11 <- get_content(country, 11)  # arguments imply differing number of rows: 20, 0
